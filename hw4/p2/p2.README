From: averma-- averma branch 
A.REPORT, B....

Total time taken: 
A- 32 sec
B- 39 sec
C- 10 sec
D- 9 sec

Processor used: 
model name      : AMD Opteron(tm) Processor 6128

Processor spec:
Data width	64 bit
The number of CPU cores	8
The number of threads	8

Total execution time taken by AB is more than CD, as these 2 cases differ by  number of threads running per core on the processor. AB runs 4 threads per core , whereas CD run 1 thread per core. The processor being used supports only scalar execution, therefore only one hardware thread can run per core. CD runs only 1 hardware thread per core, whereas AB runs 4 threads per core. This makes CD faster in comparison with AB. 

-------------------------------------------------------------
MPI TIMES:
A data
---------------------------------------------------------------------------
@--- MPI Time (seconds) ---------------------------------------------------
---------------------------------------------------------------------------
Task    AppTime    MPITime     MPI%
   0       32.7      0.804     2.46
   1       32.7      0.862     2.63
   2       32.7      0.804     2.46
   3       32.7      0.925     2.83
   4       32.7      0.654     2.00
   5       32.7      0.681     2.08
   6       32.7      0.901     2.75
   7       32.7      0.946     2.89
   *        262       6.58     2.51
   
B data 
---------------------------------------------------------------------------
@--- MPI Time (seconds) ---------------------------------------------------
---------------------------------------------------------------------------
Task    AppTime    MPITime     MPI%
   0       39.1      0.948     2.43
   1         39        1.2     3.08
   2         39       1.13     2.90
   3         39       1.04     2.65
   4       39.1      0.937     2.40
   5         39       1.18     3.02
   6         39      0.906     2.32
   7         39      0.881     2.26
   *        312       8.22     2.63

C data
---------------------------------------------------------------------------
@--- MPI Time (seconds) ---------------------------------------------------
---------------------------------------------------------------------------
Task    AppTime    MPITime     MPI%
   0       9.57       1.49    15.60
   1       9.57        1.5    15.66
   2       9.57        1.5    15.67
   3       9.57       1.55    16.24
   4       9.57       1.63    17.06
   5       9.57       1.53    15.95
   6       9.57       1.51    15.75
   7       9.57       1.56    16.26
   8       9.57       1.64    17.13
   9       9.57        1.5    15.67
  10       9.57       1.49    15.60
  11       9.57       1.56    16.29
  12       9.56       1.58    16.55
  13       9.56       1.54    16.10
  14       9.56       1.49    15.53
  15       9.56       1.51    15.80
  16       9.56       1.76    18.35
  17       9.57      0.816     8.53
  18       9.57      0.822     8.60
  19       9.57       1.76    18.37
  20       9.56       1.63    17.02
  21       9.56       1.54    16.15
  22       9.56       1.56    16.32
  23       9.56       1.63    17.06
  24       9.57       1.64    17.19
  25       9.57       1.58    16.54
  26       9.57       1.55    16.18
  27       9.57       1.65    17.27
  28       9.56        1.5    15.68
  29       9.56       1.47    15.33
  30       9.56       1.45    15.16
  31       9.56       1.47    15.38
   *        306       48.4    15.81
   
D data
---------------------------------------------------------------------------
@--- MPI Time (seconds) ---------------------------------------------------
---------------------------------------------------------------------------
Task    AppTime    MPITime     MPI%
   0       9.57       1.54    16.11
   1       9.58       1.47    15.34
   2       9.58       1.49    15.59
   3       9.58       1.55    16.17
   4       9.64       1.68    17.44
   5       9.57       1.57    16.42
   6        9.6       1.55    16.14
   7       9.61        1.7    17.66
   8       9.57       1.65    17.29
   9       9.58       1.54    16.09
  10       9.57       1.52    15.91
  11        9.6       1.61    16.79
  12       9.57       1.56    16.27
  13       9.58       1.51    15.70
  14       9.61       1.51    15.72
  15       9.61       1.58    16.47
  16       9.59        1.8    18.77
  17       9.56      0.777     8.13
  18       9.58      0.824     8.60
  19       9.57       1.78    18.65
  20       9.54       1.64    17.23
  21       9.54       1.52    15.92
  22       9.56       1.56    16.34
  23       9.55       1.57    16.45
  24       9.59       1.67    17.37
  25       9.59       1.56    16.24
  26       9.63       1.58    16.38
  27       9.57        1.6    16.70
  28       9.57       1.56    16.31
  29       9.61       1.64    17.10
  30       9.58       1.52    15.85
  31       9.57       1.55    16.20
   *        307       49.2    16.04
---------------------------------
DATA[1]
A:
*        262       6.58     2.51
B:
*        312       8.22     2.63
C:
*        306       48.4    15.81
D:
*        307       49.2    16.04


Expectation :
Configurations of C & D- have a total of 32 MPI ranks, i.e. 4 nodes * 8 cores each , 1 thread per core , whereas A & B- have a total of 8 MPI ranks, i.e.  4 nodes * 2 cores each, with 4 threads per core. 
We expect C & D to take 4-6 times longer than A & B in terms of MPI calls. 

Observation:
As seen from DATA[1], we observe that A & B take 6.13 and 8.22, and C & D take 48.4 and 49.2 respectively. This meets our expectations explained above. 


----------------------------------
Number of Mpi call counts: 
Category 1: -- neigbours- halo exchange--
Isend
[arajend4@c101 build]$ mpirun -np 8 ./bin/kripke.exe --procs 2,2,2

[arajend4@c101 build]$ cat matrix.data
0 0 80 80 0 80 0 0 0
1 80 0 0 80 0 80 0 0
2 80 0 0 80 0 0 80 0
3 0 80 80 0 0 0 0 80
4 80 0 0 0 0 80 80 0
5 0 80 0 0 80 0 0 80
6 0 0 80 0 80 0 0 80
7 0 0 0 80 0 80 80 0

[arajend4@c101 build]$ mpirun -np 32 ./bin/kripke.exe --procs 2,4,4

0 0 80 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 80 0 80 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 0 0 0
2 0 80 0 80 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 0 0
3 0 0 80 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 0
4 80 0 0 0 0 80 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0
5 0 80 0 0 80 0 80 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0
6 0 0 80 0 0 80 0 80 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 0 0 0 0 0
7 0 0 0 80 0 0 80 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 0 0 0 0
8 0 0 0 0 80 0 0 0 0 80 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 0 0 0
9 0 0 0 0 0 80 0 0 80 0 80 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 0 0
10 0 0 0 0 0 0 80 0 0 80 0 80 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 0
11 0 0 0 0 0 0 0 80 0 0 80 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0
12 0 0 0 0 0 0 0 0 80 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0
13 0 0 0 0 0 0 0 0 0 80 0 0 80 0 80 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 0 0
14 0 0 0 0 0 0 0 0 0 0 80 0 0 80 0 80 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 0
15 0 0 0 0 0 0 0 0 0 0 0 80 0 0 80 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80
16 80 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 0 0 80 0 0 0 0 0 0 0 0 0 0 0
17 0 80 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 0 80 0 0 80 0 0 0 0 0 0 0 0 0 0
18 0 0 80 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 0 80 0 0 80 0 0 0 0 0 0 0 0 0
19 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 80 0 0 0 0 0 0 0 0
20 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 80 0 0 80 0 0 0 0 0 0 0
21 0 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 80 0 80 0 0 80 0 0 0 0 0 0
22 0 0 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 80 0 80 0 0 80 0 0 0 0 0
23 0 0 0 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 80 0 0 0 0 80 0 0 0 0
24 0 0 0 0 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 80 0 0 80 0 0 0
25 0 0 0 0 0 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 80 0 80 0 0 80 0 0
26 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 80 0 80 0 0 80 0
27 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 80 0 0 0 0 80
28 0 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 80 0 0
29 0 0 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 80 0 80 0
30 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 80 0 80
31 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 0 0 0 0 0 0 0 0 0 0 0 80 0 0 80 0



Category 2: Follows tree *2^4
Allreduce
Scan
